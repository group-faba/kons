import os, json, logging, threading
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)
TOKEN = os.environ["TELEGRAM_TOKEN"]
PORT  = int(os.environ.get("PORT", "8080"))

# --- Flask healthcheck ---
app = Flask(__name__)
@app.route("/")# bot.py

import os
import json
import logging
import threading
from datetime import datetime

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from flask import Flask
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN         = os.environ["TELEGRAM_TOKEN"]
SHEET_ID      = os.environ["SHEET_ID"]
CREDS_JSON    = json.loads(os.environ["GSPREAD_CREDENTIALS_JSON"])
PORT          = int(os.environ.get("PORT", "8080"))

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets ---
SCOPES    = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds     = ServiceAccountCredentials.from_json_keyfile_dict(CREDS_JSON, SCOPES)
gc        = gspread.authorize(creds)
spreadsheet = gc.open_by_key(SHEET_ID)
worksheet   = spreadsheet.worksheet("–õ–∏—Å—Ç1")  # <- —É–∫–∞–∂–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ª–∏—Å—Ç–∞

# --- Flask healthcheck –¥–ª—è Render ---
app = Flask(__name__)

@app.route("/")
def health():
    return "OK", 200

# --- –•–µ–Ω–¥–ª–µ—Ä /webapp: –≤—ã–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
async def cmd_webapp(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = [[
        InlineKeyboardButton(
            "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É",
            web_app=WebAppInfo(url="https://telegram-kons.vercel.app/")
        )
    ]]
    await update.message.reply_text(
        "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É:",
        reply_markup=InlineKeyboardMarkup(kb)
    )

# --- –•–µ–Ω–¥–ª–µ—Ä –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp –∏ –∑–∞–ø–∏—Å—å –≤ Google Sheets ---
async def handle_webapp_data(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    raw = update.message.web_app_data.data
    logging.info("WEB_APP_DATA payload: %s", raw)
    data = json.loads(raw)
    fio  = data.get("fio", "").strip()
    city = data.get("city", "").strip()
    user_id = update.effective_user.id
    ts = datetime.now().isoformat(sep=" ", timespec="seconds")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ Google Sheets
    worksheet.append_row([ts, fio, city, user_id])

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞:\n–§–ò–û: {fio}\n–ì–æ—Ä–æ–¥: {city}")

# --- –°–±–æ—Ä–∫–∞ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
application = (
    ApplicationBuilder()
    .token(TOKEN)
    .build()
)

application.add_handler(CommandHandler("webapp", cmd_webapp))
application.add_handler(
    MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data)
)

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ polling ---
def run_bot():
    logging.info("üöÄ Starting Telegram polling‚Ä¶")
    application.run_polling(drop_pending_updates=True)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    # 1) –ó–∞–ø—É—Å–∫–∞–µ–º Flask –¥–ª—è healthcheck –≤ —Ñ–æ–Ω–µ
    t = threading.Thread(target=lambda: app.run(host="0.0.0.0", port=PORT), daemon=True)
    t.start()

    # 2) –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()
def health():
    return "OK", 200

# --- –í–∞—à —Ä–∞–±–æ—á–∏–π —Ö–µ–Ω–¥–ª–µ—Ä /webapp ---
async def send_webapp_button(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
             web_app=WebAppInfo(url="https://telegram-kons.vercel.app/"))]]
    await update.message.reply_text(
        "–ó–∞–ø—É—Å—Ç–∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(kb)
    )

# --- –•–µ–Ω–¥–ª–µ—Ä –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp ---
async def handle_webapp_data(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    data = json.loads(update.message.web_app_data.data)
    fio  = data.get("fio", "")
    city = data.get("city", "")
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏: –§–ò–û={fio}, –ì–æ—Ä–æ–¥={city}")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ---
application = (
    ApplicationBuilder()
    .token(TOKEN)
    .build()
)
application.add_handler(CommandHandler("webapp", send_webapp_button))
application.add_handler(
    MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data)
)

if __name__ == "__main__":
    # 1) Flask –≤ —Ñ–æ–Ω–µ
    t = threading.Thread(
        target=lambda: app.run(host="0.0.0.0", port=PORT),
        daemon=True
    )
    t.start()
    # 2) Polling –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    application.run_polling(drop_pending_updates=True)
