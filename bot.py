import os
import json
import logging
from datetime import datetime, timedelta
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from flask import Flask
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
TOKEN      = os.environ['TELEGRAM_TOKEN']
SHEET_ID   = os.environ['SHEET_ID']
CREDS_JSON = json.loads(os.environ['GSPREAD_CREDENTIALS_JSON'])
PORT       = int(os.environ.get('PORT', '8080'))

# --- Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
SCOPES = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_dict(CREDS_JSON, SCOPES)
gc = gspread.authorize(creds)
spreadsheet = gc.open_by_key(SHEET_ID)

# --- Flask healthcheck (—á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª)
app = Flask(__name__)
@app.route('/')
def health():
    return 'OK', 200

# --- STATES
(
    START_REGION, START_FIELD, START_SPEC,
    TIME_CHOOSE_DATE, TIME_CHOOSE_MONTH, TIME_CHOOSE_YEAR, TIME_CHOOSE_HOUR, TIME_CONFIRM,
    REG_NAME, REG_CITY, REG_FIELD, REG_DESC, REG_PHOTO
) = range(12)

# --- –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def get_unique(column):
    ws = spreadsheet.worksheet('–õ–∏—Å—Ç1')
    values = ws.col_values(column)[1:]
    return sorted(list(set(values)))

def get_specialists(region=None, field=None):
    ws = spreadsheet.worksheet('–õ–∏—Å—Ç1')
    rows = ws.get_all_records()
    result = []
    for row in rows:
        if region and row['–ì–æ—Ä–æ–¥'] != region:
            continue
        if field and row['–°—Ñ–µ—Ä–∞'] != field:
            continue
        result.append(row)
    return result

def get_specialist_row(telegram_id):
    ws = spreadsheet.worksheet('–õ–∏—Å—Ç1')
    rows = ws.get_all_records()
    for idx, row in enumerate(rows, start=2):
        if str(row.get("Telegram ID", "")) == str(telegram_id):
            return ws, idx, row
    return None, None, None

# --- /start (–≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞)
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    regions = get_unique(2)
    kb = [[InlineKeyboardButton(f"üåé {r}", callback_data=f"region|{r}")] for r in regions]
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=InlineKeyboardMarkup(kb))
    return START_REGION

async def cb_region(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    region = q.data.split('|')[1]
    ctx.user_data['region'] = region
    fields = get_unique(3)
    kb = [[InlineKeyboardButton(f"üíº {f}", callback_data=f"field|{f}")] for f in fields]
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    await q.edit_message_text(f"–†–µ–≥–∏–æ–Ω: {region}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É:", reply_markup=InlineKeyboardMarkup(kb))
    return START_FIELD

async def cb_field(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    field = q.data.split('|')[1]
    ctx.user_data['field'] = field
    specs = get_specialists(ctx.user_data.get('region'), field)
    kb = [[InlineKeyboardButton(f"üë§ {s['–§–ò–û']}", callback_data=f"spec|{s['Telegram ID']}")] for s in specs]
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    await q.edit_message_text(
        f"–†–µ–≥–∏–æ–Ω: {ctx.user_data['region']}\n–°—Ñ–µ—Ä–∞: {field}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    ctx.user_data['specs'] = {str(s['Telegram ID']): s for s in specs}
    return START_SPEC

async def cb_spec(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    spec_id = q.data.split('|')[1]
    spec = ctx.user_data['specs'][spec_id]
    caption = f"{spec['–§–ò–û']}\n{spec['–û–ø–∏—Å–∞–Ω–∏–µ']}"
    kb = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", callback_data=f"choose|{spec_id}")]
    ]
    if spec['photo_file_id']:
        await q.message.reply_photo(photo=spec['photo_file_id'], caption=caption, reply_markup=InlineKeyboardMarkup(kb))
        await q.delete_message()
    else:
        await q.edit_message_text(caption, reply_markup=InlineKeyboardMarkup(kb))
    # –°–ª–æ—Ç—ã (–¥–∞—Ç—ã)
    ws, row_num, _ = get_specialist_row(spec_id)
    if row_num:
        slots_str = ws.cell(row_num, 8).value  # H column
        if slots_str:
            all_slots = [x.strip() for x in slots_str.split(';') if x.strip()]
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
            date_set = sorted(set(s.split()[0] for s in all_slots))
            kb_dates = [[InlineKeyboardButton(f"üìÖ {d}", callback_data=f"date|{spec_id}|{d}")] for d in date_set]
            kb_dates.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
            await q.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(kb_dates))
        else:
            await q.message.reply_text("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]))
    else:
        await q.message.reply_text("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]))
    return ConversationHandler.END

async def cb_date(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, spec_id, date_str = q.data.split('|')
    ws, row_num, spec = get_specialist_row(spec_id)
    slots_str = ws.cell(row_num, 8).value
    slots = [x.strip() for x in slots_str.split(';') if x.strip() and x.startswith(date_str)]
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
    kb = [[InlineKeyboardButton(f"üïí {s.split()[1]}", callback_data=f"book|{spec_id}|{s}")] for s in slots]
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    await q.message.reply_text(f"–î–∞—Ç–∞: {date_str}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=InlineKeyboardMarkup(kb))

async def cb_book(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, spec_id, slot_str = q.data.split('|')
    ws, row_num, spec = get_specialist_row(spec_id)
    slots_str = ws.cell(row_num, 8).value
    slots = [x.strip() for x in slots_str.split(';') if x.strip()]
    if slot_str not in slots:
        await q.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
        return ConversationHandler.END
    slots.remove(slot_str)
    ws.update_cell(row_num, 8, ';'.join(slots))
    await q.message.reply_text(f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {spec['–§–ò–û']} –Ω–∞ {slot_str} (–ú–°–ö)")
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—É
    try:
        await update.get_bot().send_message(
            spec_id, f"–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {update.effective_user.full_name} (@{update.effective_user.username}) –Ω–∞ {slot_str}"
        )
    except Exception:
        pass
    return ConversationHandler.END

# --- /time (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤)
async def cmd_time(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥
    days = [(datetime.now() + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]
    kb = [[InlineKeyboardButton(f"üìÖ {d}", callback_data=f"time_date|{d}")] for d in days]
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:", reply_markup=InlineKeyboardMarkup(kb))
    return TIME_CHOOSE_DATE

async def cb_time_date(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    date_str = q.data.split('|')[1]
    ctx.user_data['add_date'] = date_str
    # –°–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤ 08:00 - 21:00
    hours = [f"{str(h).zfill(2)}:00" for h in range(8, 22)]
    kb = [[InlineKeyboardButton(f"üïí {h}", callback_data=f"time_hour|{h}")] for h in hours]
    kb.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="time_confirm")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    ctx.user_data['add_slots'] = []
    await q.message.reply_text(
        f"–î–∞—Ç–∞: {date_str}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —á–∞—Å—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–ú–°–ö):", 
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return TIME_CHOOSE_HOUR

async def cb_time_hour(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    hour = q.data.split('|')[1]
    slots = ctx.user_data.get('add_slots', [])
    if hour not in slots:
        slots.append(hour)
    ctx.user_data['add_slots'] = slots
    await q.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {', '.join(slots)}")

async def cb_time_confirm(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    date = ctx.user_data.get('add_date')
    slots = ctx.user_data.get('add_slots', [])
    if not date or not slots:
        await q.message.reply_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è.")
        return ConversationHandler.END
    ws, row_num, spec = get_specialist_row(update.effective_user.id)
    if not row_num:
        await q.message.reply_text("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    slots_str = ws.cell(row_num, 8).value
    all_slots = [x.strip() for x in slots_str.split(';') if x.strip()] if slots_str else []
    for h in slots:
        all_slots.append(f"{date} {h}")
    ws.update_cell(row_num, 8, ';'.join(all_slots))
    await q.message.reply_text(
        f"–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ: {date} ‚Äî {', '.join(slots)}\n–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å? (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="time_repeat")],
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="time_done")]
        ])
    )
    return ConversationHandler.END

async def cb_time_repeat(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    # –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–æ–≤–µ–º cmd_time
    await cmd_time(q, ctx)
    return TIME_CHOOSE_DATE

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–º–∏–Ω–∏–º—É–º)
async def reg_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    return REG_NAME

async def reg_name(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['fio'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return REG_CITY

async def reg_city(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['city'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    return REG_FIELD

async def reg_field(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['field'] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ:")
    return REG_DESC

async def reg_desc(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['desc'] = update.message.text
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–∏–ª–∏ –ª—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç):")
    return REG_PHOTO

async def reg_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        ctx.user_data['photo_file_id'] = file_id
    else:
        ctx.user_data['photo_file_id'] = ''
    fio = ctx.user_data['fio']
    ws = spreadsheet.worksheet('–õ–∏—Å—Ç1')
    ws.append_row([
        fio,
        ctx.user_data['city'],
        ctx.user_data['field'],
        ctx.user_data['desc'],
        ctx.user_data['photo_file_id'],
        update.effective_user.id,
        update.effective_user.username or '',
        ''
    ])
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç!")
    return ConversationHandler.END

# --- Handlers
application = ApplicationBuilder().token(TOKEN).build()

conv_start = ConversationHandler(
    entry_points=[CommandHandler("start", cmd_start)],
    states={
        START_REGION: [CallbackQueryHandler(cb_region, pattern=r'^region\|')],
        START_FIELD:  [CallbackQueryHandler(cb_field, pattern=r'^field\|')],
        START_SPEC:   [CallbackQueryHandler(cb_spec, pattern=r'^spec\|')],
    },
    fallbacks=[CallbackQueryHandler(cmd_start, pattern='^back$')],
    per_message=True,
    allow_reentry=True,
)

conv_time = ConversationHandler(
    entry_points=[CommandHandler("time", cmd_time)],
    states={
        TIME_CHOOSE_DATE: [CallbackQueryHandler(cb_time_date, pattern=r'^time_date\|')],
        TIME_CHOOSE_HOUR: [
            CallbackQueryHandler(cb_time_hour, pattern=r'^time_hour\|'),
            CallbackQueryHandler(cb_time_confirm, pattern=r'^time_confirm$'),
        ],
    },
    fallbacks=[CallbackQueryHandler(cmd_start, pattern='^back$')],
)

application.add_handler(conv_start)
application.add_handler(conv_time)
application.add_handler(CommandHandler("register", reg_start))
application.add_handler(CallbackQueryHandler(cb_date, pattern=r'^date\|'))
application.add_handler(CallbackQueryHandler(cb_book, pattern=r'^book\|'))
application.add_handler(CallbackQueryHandler(cb_time_repeat, pattern=r'^time_repeat$'))

# --- Flask + Application –∑–∞–ø—É—Å–∫
def run_flask():
    app.run(host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    import threading
    threading.Thread(target=run_flask, daemon=True).start()
    application.run_polling()
