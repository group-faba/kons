import os
import json
import logging

from flask import Flask, request
import gspread
from oauth2client.service_account import ServiceAccountCredentials

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from datetime import datetime, timedelta
import threading

# =========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===========
logging.basicConfig(level=logging.INFO)
TOKEN      = os.environ["TELEGRAM_TOKEN"]
SHEET_ID   = os.environ["SHEET_ID"]
CREDS_JSON = json.loads(os.environ["GSPREAD_CREDENTIALS_JSON"])
PORT       = int(os.environ.get("PORT", "8080"))

# =========== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ===========
SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds  = ServiceAccountCredentials.from_json_keyfile_dict(CREDS_JSON, SCOPES)
gc     = gspread.authorize(creds)
sheet  = gc.open_by_key(SHEET_ID)

def append_to_sheet(values: list):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç."""
    ws = sheet.worksheet("–õ–∏—Å—Ç1")
    ws.append_row(values)

# =========== Flask –¥–ª—è healthcheck + –ø—Ä–∏—ë–º iOS ===========
app = Flask(__name__)

@app.route("/")
def health():
    return "OK", 200

@app.route("/submit", methods=["POST"])
def submit_from_ios():
    """
    –û–∂–∏–¥–∞–µ–º JSON:
      { "fio": "...", "city": "...", "chat_id": 123456789 }
    """
    data = request.get_json(force=True)
    fio  = data.get("fio", "")
    city = data.get("city", "")
    chat = data.get("chat_id")  # int –∏–ª–∏ None

    # 1) –ó–∞–ø–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    append_to_sheet([fio, city])

    # 2) –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–∏–º Telegram-—á–∞—Ç
    if chat:
        try:
            application.bot.send_message(
                chat_id=chat,
                text=f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ iOS:\n–§–ò–û: {fio}\n–ì–æ—Ä–æ–¥: {city}"
            )
        except Exception:
            pass

    return {"status": "ok"}, 200

# =========== –•–µ–Ω–¥–ª–µ—Ä—ã –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (register, time, –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∞...) ===========
# –ó–¥–µ—Å—å —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ ConversationHandler‚Äô–æ–≤.
# –Ø –ø–æ–∫–∞–∂—É –ª–∏—à—å –∑–∞–≥–ª—É—à–∫—É –¥–ª—è /start –∏ /webapp:

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! /webapp ‚Äî —Ñ–æ—Ä–º–∞, /register ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.")

async def cmd_webapp(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = [[
        InlineKeyboardButton(
            "–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url="https://telegram-kons.vercel.app/")
        )
    ]]
    await update.message.reply_text(
        "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É:", reply_markup=InlineKeyboardMarkup(kb)
    )

async def on_webapp_data(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º callback –∏–∑ WebApp –≤–Ω—É—Ç—Ä–∏ Telegram."""
    raw  = update.message.web_app_data.data
    data = json.loads(raw)
    fio  = data.get("fio", "")
    city = data.get("city", "")
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –æ—Ç–≤–µ—á–∞–µ–º
    append_to_sheet([fio, city, update.effective_user.id])
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏: –§–ò–û={fio}, –ì–æ—Ä–æ–¥={city}")

# =========== –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===========
application = ApplicationBuilder().token(TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤:
application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(CommandHandler("webapp", cmd_webapp))
application.add_handler(
    MessageHandler(filters.StatusUpdate.WEB_APP_DATA, on_webapp_data)
)

# TODO: —Å—é–¥–∞ –∂–µ –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –≤–∞—à–∏ ConversationHandler‚Äô—ã conv_reg, conv_time, conv_main –∏ —Ç. –ø.
# application.add_handler(conv_reg)
# application.add_handler(conv_time)
# application.add_handler(conv_main)

# =========== –ó–∞–ø—É—Å–∫ Flask + polling ===========
def run_flask():
    app.run(host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    # 1) –ë—ç–∫–≥—Ä–∞—É–Ω–¥ –¥–ª—è healthcheck –∏ /submit
    threading.Thread(target=run_flask, daemon=True).start()
    # 2) –ü–æ–ª–ª–∏–Ω–≥ Telegram
    application.run_polling(drop_pending_updates=True)
